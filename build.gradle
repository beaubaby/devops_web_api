
plugins {
    id("org.springframework.boot") version "2.2.5.RELEASE"
    id("io.spring.dependency-management") version "1.0.9.RELEASE"
    id("org.jetbrains.kotlin.jvm") version "1.3.61"
    id("org.jetbrains.kotlin.plugin.spring") version "1.3.61"
    id("com.github.spotbugs") version "3.0.0"
    id("org.owasp.dependencycheck") version "5.3.1"
    id("org.jetbrains.kotlin.plugin.jpa") version "1.3.72"
}

group = "com.ka.loaneligibility"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

configurations {
    ktlint
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-mustache")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("io.kotlintest:kotlintest-runner-junit5:3.4.2")
    testImplementation("io.kotlintest:kotlintest-extensions-spring:3.4.2")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.mockk:mockk:1.9.3")
    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1")
    ktlint("com.pinterest:ktlint:0.36.0")
    //implementation("mysql:mysql-connector-java:5.1.42")
//    compile ('mysql:mysql-connector-java:5.1.42')
//    compile (group: 'org.postgresql', name: 'postgresql', version: '42.1.4')
//    runtime ('org.postgresql:postgresql:9.4-1206-jdbc42')
    compile ('org.postgresql:postgresql:42.2.0')
    compile ('org.springframework.boot:spring-boot-starter-data-jpa')
    compile ("com.h2database:h2")
}

spotbugs {
    ignoreFailures = false
    showProgress = true
    effort = 'default'
    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/spotbugs")
    includeFilter = file("spotbugs-include.xml")
    excludeFilter = file("spotbugs-exclude.xml")
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

task("ktlint", type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args = ["src/**/*.kt"]
}
check.dependsOn ktlint

task("ktlintFormat", type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args = ["-F", "src/**/*.kt"]
}
